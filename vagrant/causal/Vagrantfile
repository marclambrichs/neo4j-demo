VAGRANTFILE_API_VERSION = "2"

################################################################################
# check plugins
################################################################################
required_plugins = %w(vagrant-hostmanager vagrant-cachier vagrant-puppet-install)

plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
  puts "Installing plugins: #{plugins_to_install.join(' ')}"
  if system "vagrant plugin install #{plugins_to_install.join(' ')}"
    exec "vagrant #{ARGV.join(' ')}"
  else
    abort "Installation of one or more plugins has failed. Aborting."
  end
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
#################################################################################
## Plugin settings
#################################################################################
  if Vagrant.has_plugin?('vagrant-cachier')
    config.cache.scope = :machine
  end

  if Vagrant.has_plugin?('vagrant-hostmanager')
    config.hostmanager.enabled           = true
    config.hostmanager.manage_host       = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline   = true
  end  
  
  if Vagrant.has_plugin?('vagrant-puppet-install')
    config.puppet_install.puppet_version = :latest
  end
  
################################################################################
# Node definitions
################################################################################
  # Read YAML file with box details
  require 'yaml'
  if File.file?('vagrant.yaml')
    yaml = YAML.load_file('vagrant.yaml')
  else
    raise "No vagrant config is provided."
  end

################################################################################
# Puppet settings
################################################################################
  env = 'causal'

################################################################################
# Virtualbox(es)
################################################################################
  config.vm.synced_folder ".", "/vagrant", disabled: true  
  yaml['nodes'].each do |node|

    config.vm.define node['name'] do |srv|
      srv.vm.hostname         = node['hostname']
      if node['aliases'].is_a?(Array) and node['aliases'].length > 0
        srv.hostmanager.aliases = node['aliases']
      end
      srv.vm.box              = node['box']
      srv.vm.box_check_update = false
      config.ssh.insert_key   = false

      srv.vm.provider :virtualbox do |vb|
        vb.name = "#{node['name']}.#{env}.vagrant"
        vb.customize [
          'modifyvm', :id,
          '--groups', '/Demo Neo4j Causal',
          '--memory', node['memory'],
          '--cpus'  , node['cpus']
        ]
        vb.customize [
          'guestproperty', 'set', :id,
          '/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold', 1000
        ]
      end      

      #-----------------------------------------------------------------------------
      #-- Networking
      #-----------------------------------------------------------------------------
      srv.vm.network :private_network, ip: node['ip']
      node['ports'].each do |mapping|
        srv.vm.network :forwarded_port, host_port: node['ip'], guest: mapping['guest'], host: mapping['host']
      end
      #-----------------------------------------------------------------------------
      #-- Synced directories
      #-----------------------------------------------------------------------------
      dirs = %w(hieradata manifests)
      dirs.each { |dir|
        srv.vm.synced_folder "../../#{env}/#{dir}", "/etc/puppetlabs/code/environments/#{env}/#{dir}",
          :owner => 'root',
          :group => 'root'
      }
      srv.vm.synced_folder "../../#{env}/modules", "/etc/puppetlabs/code/modules",
        :owner => 'root',
        :group => 'root'

      #-----------------------------------------------------------------------------
      #-- Puppet provisioning
      #-----------------------------------------------------------------------------
      srv.vm.provision :puppet do |puppet|
        puppet.options           = "--debug --verbose"
        puppet.environment_path  = "../../"
        puppet.environment       = "#{env}"
        puppet.hiera_config_path = "../../#{env}/hiera.yaml"
        puppet.facter            = { "application" => node['application'] }
      end
    end # end config.vm.define node['name'] do |srv|
  end # end yaml['nodes'].each
end

